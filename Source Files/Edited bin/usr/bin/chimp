#!/bin/sh
#Disable the bloody cursor, used when exiting shell script, as I enable the cursor for that.
echo -n -e "\033[?25l"
###############################################################################################################
Disclaimer="\nI take no responsibility for what you do from now on.\n\nI have setup this program for certain mod types, if you choose to use one that is not designed for your modded system and you damage it, that falls upon yourself.\n\nIf you are Softmodded 'DO NOT UNLOCK YOUR MASTER HDD!'\nNever UNLOCK the MASTER Hard Drive on a SOFTMODDED system. NEVER!"
###############################################################################################################
/usr/bin/hdsecinfo /dev/hdb | grep "Security level : high" > /tmp/hdlock
lockhdb=$(cat /tmp/hdlock)
if [ -n "$lockhdb" ]; then
	slave_lock_status="locked"
	rm -f /tmp/hdlock > /dev/null 2>&1
fi

if [ "$slave_lock_status" == "locked" ] ; then
	dialog --infobox "Slave HD is locked.\nPlease unlock the HD first." 0 0
	sleep 3
	main_menu
else
	echo "y" | hdtool2 -a -d /dev/hdb -o LOCK > /tmp/hdtool2.log
	Check_Lock_Status=`grep "Command completed successfully" /tmp/hdtool2.log`
	if [ "$Check_Lock_Status" == "Command completed successfully" ]; then
		echo "y" | hdtool2 -a -d /dev/hdb -o disable-pw > /tmp/hdtool2.log
		rm -f /tmp/hdtool2.log > /dev/null 2>&1
	else
		Disable_Cloning_Features="True"
		rm -f /tmp/hdtool2.log > /dev/null 2>&1
	fi
fi
###############################################################################################################
slave_lock_status() {
#/sbin/hdparm -I /dev/hdb | grep "Security level high" > /tmp/hdlock
/usr/bin/hdsecinfo /dev/hdb | grep "Security level : high" > /tmp/hdlock
lockhdb=$(cat /tmp/hdlock)
if [ -z "$lockhdb" ]; then
	echo "Unlocked" > /tmp/hdlock
	lockhdb=$(cat /tmp/hdlock)
	rm -f /tmp/hdlock > /dev/null 2>&1
else
	echo "Locked" > /tmp/hdlock
	lockhdb=$(cat /tmp/hdlock)
	rm -f /tmp/hdlock > /dev/null 2>&1
fi
}
master_lock_status() {
#/sbin/hdparm -I /dev/hda | grep "Security level high" > /tmp/hdlock
/usr/bin/hdsecinfo /dev/hda | grep "Security level : high" > /tmp/hdlock
lockhda=$(cat /tmp/hdlock)
if [ -z "$lockhda" ]; then
	echo "Unlocked" > /tmp/hdlock
	lockhda=$(cat /tmp/hdlock)
	rm -f /tmp/hdlock > /dev/null 2>&1
else
	echo "Locked" > /tmp/hdlock
	lockhda=$(cat /tmp/hdlock)
	rm -f /tmp/hdlock > /dev/null 2>&1
fi
}
###############################################################################################################
reboot() {
	dialog --infobox "Restarting Xbox" 3 19 ;
	/sbin/reboot -d 3 -f
}
shutdown() {
	dialog --infobox "Shutting Down Xbox" 3 22 ;
	/sbin/poweroff -d 3 -f
}
###############################################################################################################
slave_partition_status() {
/usr/bin/xboxdumper listpartitions /dev/hdb 0 0 | grep "Error in listing partitions" > /tmp/partinfo
partinfo=$(cat /tmp/partinfo)
if [ -z "$partinfo" ]; then
	dialog --msgbox "`xboxdumper listpartitions /dev/hdb`" 0 0
	rm -f /tmp/partinfo > /dev/null 2>&1
else
	dialog --title "ERROR - XBP Partition table not found" --msgbox "\n1. This HD was formatted with UnleashX or EvolutionX.\n   Note: Standard Xbox partitions will be present.\n\n2. If this is a new HD then there is no partition\n   table." 0 0
	rm -f /tmp/partinfo > /dev/null 2>&1
fi
}
master_partition_status() {
/usr/bin/xboxdumper listpartitions /dev/hda 0 0 | grep "Error in listing partitions" > /tmp/partinfo
partinfo=$(cat /tmp/partinfo)
if [ -z "$partinfo" ]; then
	dialog --msgbox "`xboxdumper listpartitions /dev/hda`" 0 0
	rm -f /tmp/partinfo > /dev/null 2>&1
else
	dialog --title "ERROR - XBP Partition table not found" --msgbox "\n1. This HD was formatted with UnleashX or EvolutionX.\n   Note: Standard Xbox partitions will be present.\n\n2. If this is a new HD then there is no partition\n   table." 0 0
	rm -f /tmp/partinfo > /dev/null 2>&1
fi
}
###############################################################################################################
check_fatx_eeprom() {
mkdir -p /tmp/E
mount -r -t fatx /dev/hda50 /tmp/E
[ -f "/tmp/E/eeprom.bin" ] && cp -f "/tmp/E/eeprom.bin" "/tmp/E:\eeprom.bin"
#dialog --msgbox "  Found E:\eeprom.bin" 5 30 
}
###############################################################################################################
network_settings_menu() {
	local IP=`ifconfig eth0 | grep 'inet addr' | cut -d ':' -f 2 | cut -d ' ' -f 1`
	if dialog --defaultno --yesno "Current IP Address: $IP\nDo you wish to reconfigure?" 0 0; then
			/usr/bin/netcardconfig
			network_settings_menu
	fi
}
###############################################################################################################
lock_unlock_hda_menu() {
local lock_unlock_hda_menu=1
dialog --nocancel --title "Master HD locking options" --menu "Where is the key source " 0 0 0 \
	1 "From Motherboard" \
	2 "From /tmp/eeprom.bin" \
	3 "From Xbox HD E:\eeprom.bin" \
	4 "From Master password:XBOXSCENE" \
	5 "From Master password:TEAMASSEMBLY" \
	6 "From /tmp/hddkey.txt" \
	7 "Go back" \
2> /tmp/lock_unlock_hda_menu
lock_unlock_hda_menu=`cat /tmp/lock_unlock_hda_menu`
case $lock_unlock_hda_menu in
	1)	
		key_src="" ;;
	2)	
		key_src=/tmp/eeprom.bin ;;
	3)	
		eval "check_fatx_eeprom" ;
		key_src="E:\eeprom.bin" ;
		umount /tmp/E ;;
	4)	
		key_src=XBOXSCENE ;;
	5)	
		key_src=TEAMASSEMBLY ;;
	6)	
		key_src=/tmp/hddkey.txt ;;
	7)	
		slave_hd_menu ;;
esac
}
###############################################################################################################
lock_unlock_hdb_menu() {
local lock_unlock_hdb_menu=1
dialog --nocancel --title "Slave HD locking options" --menu "Where is the key source " 0 0 0 \
	1 "From Motherboard" \
	2 "From /tmp/eeprom.bin" \
	3 "From Xbox HD E:\eeprom.bin" \
	4 "From Master password:XBOXSCENE" \
	5 "From Master password:TEAMASSEMBLY" \
	6 "From /tmp/hddkey.txt" \
	7 "Go back" \
2> /tmp/lock_unlock_hdb_menu
lock_unlock_hdb_menu=`cat /tmp/lock_unlock_hdb_menu`
case $lock_unlock_hdb_menu in
	1)	
		key_src="" ;;
	2)	
		key_src=/tmp/eeprom.bin ;;
	3)	
		eval "check_fatx_eeprom" ;
		key_src="E:\eeprom.bin" ;
		umount /tmp/E ;;
	4)	
		key_src=XBOXSCENE ;;
	5)	
		key_src=TEAMASSEMBLY ;;
	6)	
		key_src=/tmp/hddkey.txt ;;
	7)	
		slave_hd_menu ;;
esac
}
###############################################################################################################
slave_hd_menu() {
local slave_hd_menu=1
dialog --nocancel --title "Slave drive options" --menu "Choose option\nHD is $lockhdb" 0 0 0 \
	1 "Lock drive" \
	2 "Unlock drive" \
	3 "Partition information" \
	4 "Format extended partitions" \
	5 "Fix Error 16" \
	6 "Go back" \
2> /tmp/slave_hd_menu
slave_hd_menu=`cat /tmp/slave_hd_menu`
case $slave_hd_menu in
	1)	
		lock_unlock_hdb_menu ;
		/usr/bin/lockhdb lock "$key_src" ;
		eval "slave_lock_status" ;
		main_menu ;;
	2)	
		lock_unlock_hdb_menu ;
		/usr/bin/lockhdb unlock "$key_src" ;
		/usr/bin/lockhdb disable-pw "$key_src" ;
		eval "slave_lock_status";
		main_menu ;;
	3)	
		eval "slave_partition_status" ;
		slave_hd_menu ;;
	4)	
		/usr/bin/lpartitionerhdb;
		slave_hd_menu ;;
	5)	dialog --title "Question Time!" --defaultno --yesno "Slave drives C partition will be overwritten.\nDo you want to proceed?" 6 50 ;
		test $? -eq 0 && /usr/bin/fix16;
		slave_hd_menu ;;
	6)	
		main_menu ;;
esac
}
###############################################################################################################
master_hd_menu() {
if [ "$Advanced_Feature_Enabled" == "True" ] ; then
	local master_hd_menu=1
	dialog --nocancel --title "Master drive options" --menu "Choose option\nHD is $lockhda" 0 0 0 \
		1 "Lock drive" \
		2 "Unlock drive" \
		3 "Partition information" \
		4 "Format extended partitions" \
		5 "Go back" \
		2> /tmp/master_hd_menu
	master_hd_menu=`cat /tmp/master_hd_menu`
	case $master_hd_menu in
		1)	
			lock_unlock_hda_menu ;
			/usr/bin/lockhda lock "$key_src" ;
			eval "master_lock_status" ;
			main_menu ;;
		2)	
			lock_unlock_hda_menu ;
			/usr/bin/lockhda unlock "$key_src" ;
			/usr/bin/lockhda disable-pw "$key_src" ;
			eval "master_lock_status" ;
			main_menu ;;
		3)	
			eval "master_partition_status" ;
			master_hd_menu ;;
		4)	
			/usr/bin/lpartitionerhda;
			master_hd_menu ;;
		5)	
			main_menu ;;
esac
else
	local master_hd_menu=1
	dialog --nocancel --title "Master drive options" --menu "Choose option\nHD is $lockhda" 0 0 0 \
		1 "Partition information" \
		2 "Format extended partitions" \
		3 "Go back" \
		2> /tmp/master_hd_menu
	master_hd_menu=`cat /tmp/master_hd_menu`
	case $master_hd_menu in
		1)	
			eval "master_partition_status" ;
			master_hd_menu ;;
		2)	
			/usr/bin/lpartitionerhda;
			master_hd_menu ;;
		3)	
			main_menu ;;
esac
fi
}
###############################################################################################################
DMA_hd_menu() {
local DMA_hd_menu=1
dialog --nocancel --title "Direct Memory Access options" --menu "Choose option" 0 0 0 \
	1 "Enable DMA - Master HD" \
	2 "Enable DMA - Slave HD" \
	3 "Enable DMA on both drives" \
	4 "Disable DMA - Master HD" \
	5 "Disable DMA - Slave HD" \
	6 "Disable DMA on both drives" \
	7 "Go back" \
2> /tmp/DMA_hd_menu
DMA_hd_menu=`cat /tmp/DMA_hd_menu`
case $DMA_hd_menu in
	1)	
		dialog --title "Direct Memory Access Enabled" --msgbox "/dev/hda: Master HD" 0 0
		/sbin/hdparm -d1 /dev/hda > /dev/null 2>&1 ;
		DMA_hd_menu ;;
	2)	
		dialog --title "Direct Memory Access Enabled" --msgbox "/dev/hdb: Slave HD" 0 0
		/sbin/hdparm -d1 /dev/hdb > /dev/null 2>&1 ;
		DMA_hd_menu ;;
	3)	
		dialog --title "Direct Memory Access Enabled" --msgbox "/dev/hda: Master HD\n/dev/hdb: Slave HD" 0 0
		/sbin/hdparm -d1 /dev/hda > /dev/null 2>&1 ;
		/sbin/hdparm -d1 /dev/hdb > /dev/null 2>&1 ;
		DMA_hd_menu ;;
	4)	
		dialog --title "Direct Memory Access Disabled" --msgbox "/dev/hda: Master HD" 0 0
		/sbin/hdparm -d0 /dev/hda > /dev/null 2>&1 ;
		DMA_hd_menu ;;
	5)	
		dialog --title "Direct Memory Access Disabled" --msgbox "/dev/hdb: Slave HD" 0 0
		/sbin/hdparm -d0 /dev/hdb > /dev/null 2>&1 ;
		DMA_hd_menu ;;
	6)	
		dialog --title "Direct Memory Access Disabled" --msgbox "/dev/hda: Master HD\n/dev/hdb: Slave HD" 0 0
		/sbin/hdparm -d0 /dev/hda > /dev/null 2>&1 ;
		/sbin/hdparm -d0 /dev/hdb > /dev/null 2>&1 ;
		DMA_hd_menu ;;
	7)	
		settings_menu ;;
esac
}
###############################################################################################################
settings_menu() {
local settings_menu=1
dialog --nocancel --title "Other options" --menu "Choose option" 0 0 0 \
	1 "Network Settings" \
	2 "Backup EEPROM" \
	3 "DMA Settings" \
	4 "Advanced Features" \
	5 "Reboot" \
	6 "Shutdown" \
	7 "Go back" \
2> /tmp/settings_menu
settings_menu=`cat /tmp/settings_menu`
case $settings_menu in
	1)	
		network_settings_menu
		settings_menu ;;
	2)	
		/usr/sbin/xbox-info -r /tmp/eeprom.bin
		dialog --msgbox "  Eeprom backup saved to /tmp/eeprom.bin" 5 47 ;
		settings_menu ;;
	3)	
		DMA_hd_menu ;;
	4)	
		if test -f "/tmp/softmodmode" ; then 
			dialog --title 'Nup, dont think so!' --msgbox "This is disabled, since you picked Softmodded Xbox." 6 40 ;
		else
			dialog --defaultno --title "Enable Advanced Features?" --yesno "\nThis will enable:\nLocking & Unlocking of the Master HD." 8 43 ;
			test $? -eq 0 && dialog --defaultno --title "Are you sure??" --yesno "\nMake sure you want this option enabled." 8 43 && test $? -eq 0 && Advanced_Feature_Enabled="True" && main_menu ;
			test $? -eq 1 && Advanced_Feature_Enabled="" && settings_menu ;
		fi
		settings_menu ;;
	5)	
		dialog --title "Question Time!" --yesno "Would you like to reboot the Xbox?" 5 40 ;
		test $? -eq 0 && reboot ;
		settings_menu ;;
	6)	
		dialog --title "Question Time!" --yesno "Would you like to shutdown the Xbox?" 5 40 ;
		test $? -eq 0 && shutdown ;
		settings_menu ;;
	7)	
		main_menu ;;
esac
}
###############################################################################################################
if test -f "/tmp/softmodmode" ; then
	main_menu ;
else
	if test -f "/tmp/hardmodmode" ; then
		main_menu ;
	else
		choice_menu() {	
			local choice_menu=1
			dialog --nocancel --title "ldotsfan/Rocky5 HD tools" --menu "Choose option" 0 0 0 \
				1 "Disclaimer" \
				2 "Softmodded Xbox" \
				3 "TSOP/Chipped Xbox" \
				4 "Linux shell" \
			2> /tmp/choice_menu
			choice_menu=`cat /tmp/choice_menu`
			case $choice_menu in
				1)	
					dialog --title 'Chimp 261812 Disclaimer' --msgbox "$Disclaimer" 15 65 ;
					choice_menu ;;
				2)	
					dialog --defaultno --title "Question Time!" --yesno "You picked the Softmodded Xbox option.\n\nIs this correct?" 8 43 ;
					test $? -eq 0 && dialog --defaultno --title 'Chimp 261812 Disclaimer' --yesno "$Disclaimer\n\nDo you agree?" 16 65 && test $? -eq 0 && "enabled" 2> /tmp/softmodmode && main_menu ;
					test $? -eq 1 && choice_menu ;;
				3)	
					dialog --defaultno --title "Question Time!" --yesno "You picked the TSOP/Chipped Xbox option.\n\nIs this correct?" 8 45 ;
					test $? -eq 0 && dialog --defaultno --title 'Chimp 261812 Disclaimer' --yesno "$Disclaimer\n\nDo you agree?" 16 65 && test $? -eq 0 && "enabled" 2> /tmp/hardmodmode && main_menu ;
					test $? -eq 1 && choice_menu ;;
				4)	
					dialog --inputbox "A USB keyboard is required to enter commands. Type \"ok\" to continue" 0 0 2> /tmp/choice_menu
					if [ "$?" = 0 -a "`cat /tmp/choice_menu|tr '[A-Z]' '[a-z]'`" = ok ] ; then
						echo -n -e "\033[?25h"
						echo -n -e "\033[43;30m]"
						clear
						echo -e "\n"
						echo "Type exit to return to the menu"
						/bin/sh -i
						echo -e "\n"
						echo "Return to the menu"
						echo -n -e "\033[?25l"
						sleep 2
					fi
					choice_menu ;;
				*) ;;
			esac
		}
		choice_menu
	fi
fi
###############################################################################################################
if test -f "/tmp/softmodmode" ; then 
	if [ "$Disable_Cloning_Features" == "True" ] ; then dialog --title 'Slave Drive Alert' --msgbox "Error: HDTool failed to lock the HDD.\n\nSlave device cannot be locked. Some menu items are disabled." 0 0 ; fi
	main_menu() {
	local main_menu=1
	if [ "$Disable_Cloning_Features" == "True" ] ; then
		dialog --nocancel --title "Softmod Mode" --menu "Choose option" 0 0 0 \
			1 "Scan physical IDE devices" \
			2 "Master drive options" \
			3 "Other options" \
		2> /tmp/main_menu
		main_menu=`cat /tmp/main_menu`
		case $main_menu in
			1)	
				/usr/bin/scanide ;
				main_menu ;;
			2)	
				eval "master_lock_status" ;
				master_hd_menu ;;
			3)	
				settings_menu ;
				main_menu ;;
			*) ;;
		esac
	else
		dialog --nocancel --title "Softmod Mode" --menu "Choose option" 0 0 0 \
			1 "Scan physical IDE devices" \
			2 "Clone from master to slave" \
			3 "Slave drive options" \
			4 "Master drive options" \
			5 "Other options" \
		2> /tmp/main_menu
		main_menu=`cat /tmp/main_menu`
		case $main_menu in
			1)	
				/usr/bin/scanide ;
				main_menu ;;
			2)	
				/usr/bin/cloneab ;
				main_menu ;;
			3)	
				eval "slave_lock_status" ;
				slave_hd_menu ;;
			4)	
				eval "master_lock_status" ;
				master_hd_menu ;;
			5)	
				settings_menu ;
				main_menu ;;
			*) ;;
		esac

	fi
	}
	main_menu
fi
###############################################################################################################
if test -f "/tmp/hardmodmode" ; then 
	main_menu() {
	local main_menu=1
	dialog --nocancel --title "TSOP/Chip Mode" --menu "Choose option" 0 0 0 \
		1 "Scan physical IDE devices" \
		2 "Clone from master to slave" \
		3 "Slave drive options" \
		4 "Master drive options" \
		5 "Other options" \
	2> /tmp/main_menu
	main_menu=`cat /tmp/main_menu`
	case $main_menu in
		1)	
			/usr/bin/scanide ;
			main_menu ;;
		2)	
			/usr/bin/cloneab ;
			main_menu ;;
		3)	
			eval "slave_lock_status" ;
			slave_hd_menu ;;
		4)	
			eval "master_lock_status" ;
			master_hd_menu ;;
		5)	
			settings_menu ;
			main_menu ;;
		*) ;;
	esac
	}
	main_menu
fi
###############################################################################################################


